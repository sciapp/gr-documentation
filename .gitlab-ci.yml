stages:
    - build
    - build-docker
    - deploy

pages:
    stage: build
    image: ubuntu:22.04
    only:
        - master
    script:
        - apt-get update -y
        - apt-get install -y python3-venv make git curl doxygen
        - curl -LO https://julialang-s3.julialang.org/bin/linux/x64/1.1/julia-1.1.0-linux-x86_64.tar.gz
        - tar xzf julia-*.tar.gz
        - rm -rf julia-*.tar.gz
        - mv julia-* /usr/local/julia
        - ln -s /usr/local/julia/bin/julia /usr/local/bin/julia
        - git submodule update --init
        - make
        - mv build public
    artifacts:
        paths:
        - public

build-docker:
    stage: build-docker
    image: docker:stable
    only:
        - branches@Scientific-IT-Systems/gr-documentation
        - tags@Scientific-IT-Systems/gr-documentation
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - if docker pull $CI_REGISTRY_IMAGE:latest; then docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:previous; docker push $CI_REGISTRY_IMAGE:previous; fi
        - docker build -t $CI_REGISTRY_IMAGE:latest .
        - docker push $CI_REGISTRY_IMAGE:latest

deploy:
    stage: deploy
    image: ubuntu:latest
    only:
        - master@Scientific-IT-Systems/gr-documentation
        - tags@Scientific-IT-Systems/gr-documentation
    script:
        - apt update
        - apt install -y ssh
        - mkdir -p --mode=700 ~/.ssh/
        - echo "$DEPLOYMENT_PRIVATE_KEY" > ~/.ssh/deployment_key
        - chmod 400 ~/.ssh/deployment_key
        - echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts
        - chmod 400 ~/.ssh/known_hosts

        - echo -e "$CI_JOB_TOKEN\n$CI_REGISTRY_IMAGE:latest\n$CI_PROJECT_NAME" | ssh -i ~/.ssh/deployment_key administrator@iffweb.iff.kfa-juelich.de
